#include <iostream>
#include "complejo.hpp"
#include <stdlib.h>

using namespace std;

#define ANCHO_IMAGEN 	20
#define ALTO_IMAGEN 	40
#define FN1	1
#define FN2	2

/********************* DECLARACION DE FUNCIONES ***********************/
void emitirMatriz(unsigned char m[][ANCHO_IMAGEN]);
complejo matrizAplanoC(int col, int fil);
complejo planoCaMatriz(const complejo &z);
/**********************************************************************/

/**************************** GLOBALES ********************************/
double deltaX=0;
double deltaY=0;
double initX=0;
double initY=0;
/**********************************************************************/

typedef enum{EXPONENCIAL=1,IDENTIDAD}t_funcion;

//recordar que el formato de C y C++ es [FILAS]x[COLUMNAS] equivalente a decir [coordenada Y] x [coordenada X]
unsigned char matrizOrigen[ALTO_IMAGEN][ANCHO_IMAGEN]=
{
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'},
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0','5','0'},
	{'9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9','9'}
};
unsigned char matrizDestino[ALTO_IMAGEN][ANCHO_IMAGEN];

int main(void)
{
	int col,fil;
	complejo z(1.4,2.6);
	complejo w; // w = f(z).
	int opcion;

	deltaX = 2.0/ANCHO_IMAGEN;
	deltaY = 2.0/ALTO_IMAGEN;
	initX = deltaX/2.0-1;
	initY = deltaY/2.0-1;

	cout << "elija una funcion:" << endl << "2) para f(z)=z" << endl << "1) para f(z) = exp(z)" << endl;
	while(opcion != EXPONENCIAL && opcion != IDENTIDAD)
		cin >> opcion;

	for(fil=0;fil<ALTO_IMAGEN;fil++)
	{
		for(col=0;col<ANCHO_IMAGEN;col++)
		{
			z = matrizAplanoC(col,fil); // recibo las coordenadas de la matriz destino, z es el correspondiente valor del plano complejo 2x2
			if(opcion==EXPONENCIAL)
				w=exp(z);
			else 
				w=id(z);

			if(w.re()<-1 || w.re()>1 || w.im()<-1 || w.im()>1)
				matrizDestino[fil][col]='0';
			else
			{
				w = planoCaMatriz(w);
				matrizDestino[fil][col]=matrizOrigen[(int)w.im()][(int)w.re()];
			}
		}
	}	
	emitirMatriz(matrizDestino);

	return EXIT_SUCCESS;
}
/************************** matrizAplanoC *************************
 * matrizAplanoC: recive como argumento una coordenada de una matriz
 * retorna un complejo comprendido en el plano complejo 2x2 
 * correspondiente a dichas coordenadas.
 ******************************************************************/
complejo matrizAplanoC(int col, int fil)
{
	return complejo(initX+deltaX*col,initY+deltaY*fil);	
}
void emitirMatriz(unsigned char m[][ANCHO_IMAGEN])
{
	int x=0,y=0;

	for(y=0;y<ALTO_IMAGEN;y++)
	{
		for(x=0;x<ANCHO_IMAGEN;x++)
			cout << m[y][x] << " ";
		cout << endl; 
	}
}
/**************************** planoCaMatriz ************************
 * planoCaMatriz: modifica el complejo que recive por referencia 
 * para que queden las coordenadas de la matriz correspondiente
 * En la parte real e imaginaria quedan asignadas las columnas y 
 * las filas respectivamente.
 ******************************************************************/
complejo planoCaMatriz(const complejo &z)
{
	complejo a((z.re()-initX)/deltaX,(z.im()-initY)/deltaY);
	a.redondeo();
	return a;
}